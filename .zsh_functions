# ~/.zsh_functions/my_functions.sh

systemUpdate() {
	sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y
	# Update Indeed repos.
	update-managed-repos
	# Snap update.
	sudo snap refresh
	# Flatpak update.
	sudo flatpak update
}

create_indeed_branch() {
    git checkout -b jira/iam_ibarragan/WORDPRESS-$1
}

testfailApi(){
	setopt xtrace
	curl -H "Origin: https://example.com" -X GET "https://$1.wpengine.test/wp-json/mwm/v1/statistics" -k
	unsetopt xtrace
}

testPassApi(){
	setopt xtrace
	curl -H "Origin: https://$1.wpengine.test" -X GET "https://$1.wpengine.test/wp-json/mwm/v1/statistics" -k
	unsetopt xtrace
}

# cd into the plugins folder while being anywhere of the website location.
# If I am in /home/user/wpdev/www/indeedmtech.wpengine.test/plugins/marketing-web-modules it
# will cd into /home/user/wpdev/www/indeedmtech.wpengine.test/plugins
# The only constraint is that you need to be into a indeed website. You can use
# `cwww indeedmtech && goPluginspath` anywhere to achieve that result.
#
# @since 26-Mar-2025
#
goPluginsPath() {
	# Find the website root path.
	WEBSITE_DIR=$(echo "$PWD" | sed -E 's/(\.test)\/.*/\1/')
	# Now move into the wp-content/plugins path
	cd $WEBSITE_DIR/wp-content/plugins
}

cmwm(){
	cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$1.wpengine.test/wp-content/plugins/marketing-web-modules/
}

osite() {
	WEBSITE_DIR=$(echo "$PWD" | sed -E 's/(\.test)\/.*/\1/')
	WEBSITE=$(basename "$WEBSITE_DIR")

	brave-browser $WEBSITE/wp-admin/
}

ogitlab() {
	current_directory=$(basename "$PWD")
	REPO_NAME=$(echo "$current_directory" | cut -d'.' -f1)

	brave-browser https://code.corp.indeed.com/wpdev/$REPO_NAME
}

pcurrentBranch() {
	git branch --show-current | xargs git push origin
}

releaseupdate() {
	SITE=$1
	JIRA_ID=$2

	if [[ -z "$1" ]]; then
		echo "Please provide the website as parameter!!"
		return 1
	fi

	if [[ -z "$2" ]]; then
		echo "Please provide the Jira ID!!"
		return 1
	fi
	
#	setopt xtrace
	# Switch to the indeed www path.
	cwww
	# Now switch to the actual website.
	cd $SITE.wpengine.test
	# Now checkout to the working branch. We donÂ´t sync because nobody should be working in the site. Is not a common branch.
	git checkout jira/iam_ibarragan/WORDPRESS-$2
	# get last previous branch name.
    BRANCH=$(git branch --show-current)

	# Now sync our local development branch and integrate our changes.
	git checkout development; git pull; git merge $BRANCH --no-edit; git status
	#Get the number of commits that local is ahead.
	AHEAD=$(git status -sb | grep -oP '(?<=ahead )\d+')

	if [[ $AHEAD -gt 0 ]]; then
		echo ""
		git --no-pager log @{u}..HEAD -n $AHEAD --oneline
		echo ""
	fi

 	# Prompt the user to confirm if all is good to push the changes
    read "PUSH_CHANGES?All good to push? [y/N]: "

    # Enable case-insensitive matching for the user's response
    setopt nocasematch

    # Check if the user confirmed with 'y' or 'yes' (case-insensitive)
    if [[ $PUSH_CHANGES =~ ^(y|yes)$ ]]
    then
        echo "Pushing changes..."
        git push
    else
        echo "Maybe fix issues and push the changes."
    fi

    # Disable case-insensitive matching
    unsetopt nocasematch
#	unsetopt xtrace
}

# Checkout a indeed jira branch.
# Usage: ckindeedbranch 8557
# Example 1: ckindeedbranch 8557
ckindeedbranch() {
	git checkout jira/iam_ibarragan/WORDPRESS-$1
}

# Creates a new directory and cd into it. Creates dirs multiple levels.
# Usage: mkdirchange myfolder
# Example 1: mkdirchange myfolder
# Example 2: mkdirchange myfolder/some/depper/level
mkdirchange () {
	dirname=$1
	mkdir -p $dirname && cd $dirname
}

# Check if site is multisite.
# Usage: icheckmultisite <site>
# Example: icheckmultisite indeeddev
icheckmultisite() {
	site=$1
	plugin=$2
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root db tables | grep -q 'wp_blogs' && echo 'Multisite is enabled' || echo 'Multisite is not enabled'"

}

rpass_multisite() {
	site=$1
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root user update iam_ibarragan --user_pass=toor"; docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --network --skip-plugins"

}

rpass() {
	site=$1
	WPDEV_PATH=~/Documents/WORK/repositories/wpdev/www/
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root user update iam_ibarragan --user_pass=toor"; docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --skip-plugins"

}

rpass_multisite2() {
	site=$1
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root user update iam_ibarragan@contractor.indeed.com --user_pass=toor"; docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --network --skip-plugins"

}

rpass2() {
	site=$1
	WPDEV_PATH=~/Documents/WORK/repositories/wpdev/www/
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root user update iam_ibarragan@contractor.indeed.com --user_pass=toor"; docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --skip-plugins"

}
# Install a plugin from a ZIP file in a site.
# Usage: ipluginsite <site> <zip_file>
# Example: ipluginsite indeeddev advanced-custom-fields-pro.zip
ipluginsite() {
	site=$1
	plugin=$2
	docker exec -i wpdev-php bash -c "cd $site.wpengine.test && wp --allow-root plugin install ../$plugin --force"

}

# Remove untracked files and folder.
# Usage: duntrackfiles
# Example: duntrackfiles
duntrackfiles() {
	git status --porcelain | grep "??" | sed 's/^?? //' | xargs rm -rf
}
# Retrieve a file from a WPEngine site
# Usage: scpget <instance> <remote_file>
# Example: scpget indeeddev wp-contents/plugins/example/remote_file.php 
function scpget() {
        scp -O $1@$1.ssh.wpengine.net:~/sites/$1/$2 .
}

jira_commit(){
	echo -n "Jira ID: "
	read id

	echo -n "Message: "
	read message

	git commit -m "WORDPRESS-$id: $message"
}

# Add Team to a websites
function add_team_to_site() {
  site=$1
  ldaps=("iam_socano" "iam_rsibrian" "iam_ibarragan" "iam_jfagner" "iam_mvunge" "iam_dsanchez" "iam_jrodriguez")

  wp_user_create=""
  wp_super_admin=""
  for ldap in ${ldaps[@]}
  do
    wp_user_create+="wp user create $ldap $ldap@contractor.indeed.com --role=administrator; "
    wp_super_admin+="wp super-admin add $ldap; "
  done

  # for site in 
  echo "Adding users to $site"
  ssh $site@$site.ssh.wpengine.net "cd sites/$site; echo 'Creating user on $site'; $wp_user_create $wp_super_admin exit;"
}

change_to_site_dev() {
    local site_id=$1
    # Create a new tmux window for the website. We don't select a window number since Tmux will switch to the new window.
    tmux new-window -n DEV_$site_id
    # Now we change or PWD to the Site ID.
    tmux send-keys "cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/" C-m
    tmux send-keys "git checkout development; git pull; git checkout staging; git pull; git checkout development; git branch" C-m
}

wp_indeed_updates() {
    local new_branch=""
    local jira_id=""
    local site_id=""
    local db_update=""

    # Parse command-line options
    OPTS=$(getopt -o n:j:s:d:m: --long new-branch:,jira-id:,site-id:,db-update:,multisite: -n 'wp_indeed_update' -- "$@")
    if [ $? != 0 ]; then
        echo -e "\e[91mInvalid option provided\e[0m" >&2
        return 1
    fi
    eval set -- "$OPTS"

    # Extract options and their arguments
    while true; do
        case "$1" in
            -n|--new-branch)
                new_branch="$2"
                shift 2
                ;;
            -j|--jira-id)
                jira_id="$2"
                shift 2
                ;;
            -s|--site-id)
                site_id="$2"
                shift 2
                ;;
            -d|--db-update)
                db_update="$2"
                shift 2
                ;;
            -m|--multisite)
                multisite="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                echo -e "\e[91mInvalid option provided\e[0m" >&2
                return 1
                ;;
        esac
    done

    # Create a new tmux window for the website. We don't select a window number since Tmux will switch to the new window.
    tmux new-window -n WP_Updates_for_$site_id
     

    # Now we change or PWD to the Site ID.
    tmux send-keys "cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/" C-m
    # Enable VPN
    tmux send-keys "warp-cli connect" C-m

    if [ "$new_branch" = "yes" ]; then
        tmux send-keys "git checkout development; git pull; git checkout -b jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
    else
       tmux send-keys "git checkout jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git pull origin jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git checkout development" C-m
       tmux send-keys "git pull" C-m
       tmux send-keys "git checkout jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git merge development --no-edit" C-m
    fi

    if [ "$db_update" = "yes" ]; then
		UPDATE_PASS="docker exec -i wpdev-php bash -c 'cd $site_id.wpengine.test && wp --allow-root user update iam_ibarragan --user_pass=toor'"
		DEACTIVATE_MULTI="docker exec -i wpdev-php bash -c 'cd $site_id.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --network --skip-plugins'"
		DEACTIVATE_SINGLE="docker exec -i wpdev-php bash -c 'cd $site_id.wpengine.test && wp --allow-root plugin deactivate miniorange-oauth-oidc-single-sign-on miniorange-force-authentication-addon --skip-plugins'"
        # Now we update the database.
        tmux send-keys "cd ~/Documents/WORK/INDEED/repositories/wpdev/" C-m
		# We reset the password.
		# Deactivate the miniorange plugins for multisite or single.
		if [ "multisite" = "yes" ]; then
			tmux send-keys "./wpdev update-db $site_id --use-local-db; cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/; warp-cli disconnect; $UPDATE_PASS; $DEACTIVATE_MULTI" C-m
		else
			tmux send-keys "./wpdev update-db $site_id --use-local-db; cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/; warp-cli disconnect; $UPDATE_PASS; $DEACTIVATE_SINGLE" C-m
		fi
    else
        # Disable VPN
        tmux send-keys "warp-cli disconnect" C-m
    fi

}

wp_release_indeed() {
    local instance=""
    local jira_id=""
    local site_id=""

    # Parse command-line options
    OPTS=$(getopt -o i:j:s: --long instance:,jira-id:,site-id: -n 'wp_release_indeed' -- "$@")
    if [ $? != 0 ]; then
        echo -e "\e[91mInvalid option provided\e[0m" >&2
        return 1
    fi
    eval set -- "$OPTS"

    # Extract options and their arguments
    while true; do
        case "$1" in
            -i|--instance)
                instance="$2"
                shift 2
                ;;
            -j|--jira-id)
                jira_id="$2"
                shift 2
                ;;
            -s|--site-id)
                site_id="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                echo -e "\e[91mInvalid option provided\e[0m" >&2
                return 1
                ;;
        esac
    done


    # Now we change or PWD to the Site ID.
    "cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/" C-m

    if [ "$instance" = "qa" ]; then
        tmux send-keys "git checkout development; git pull; git checkout -b jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
    else
       tmux send-keys "git checkout jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git pull origin jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git checkout development" C-m
       tmux send-keys "git pull" C-m
       tmux send-keys "git checkout jira/iam_ibarragan/WORDPRESS-$jira_id" C-m
       tmux send-keys "git merge development --no-edit" C-m
    fi

    # Now we update the database.
    tmux send-keys "cd ~/Documents/WORK/INDEED/repositories/wpdev/" C-m
    tmux send-keys "./wpdev update-db $site_id --use-local-db; cd ~/Documents/WORK/INDEED/repositories/wpdev/www/$site_id.wpengine.test/" C-m
}

wpe_ssh () {
	ssh -i ~/.ssh/id_rsa_indeed $1@$1.ssh.wpengine.net
}
